{"version":3,"file":null,"sources":["../src/util.js","../src/constants.js","../src/connect.js","../src/subscription.js","../src/calculation.js","../src/changeTrigger.js","../src/asyncChangeTrigger.js"],"sourcesContent":["export const error = (location, msg) => {\n  throw new Error(`*** Error in ${location}: ${msg}`)\n}\n\n/*\n  Functions to determine the type of something\n  Pattern stolen from here: http://tobyho.com/2011/01/28/checking-types-in-javascript/\n*/\nexport const getType = whatever => (whatever).constructor;\nexport const isObject = obj => (obj).constructor === Object;\nexport const isArray = arr => (arr).constructor === Array;\nexport const isString = str => (str).constructor === String;\nexport const isFunction = func => typeof(func) == 'function'; // Taken from: https://jsperf.com/alternative-isfunction-implementations/4\nexport const isBoolean = binary => (binary).constructor === Boolean;\nexport const isSet = smthg => (smthg !== undefined && smthg !== null);\nexport const isEmptyString = str => (str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '') === ''); // Taken from: https://stackoverflow.com/questions/3000649/trim-spaces-from-start-and-end-of-string\nexport const isEmptyObject = obj => (Object.keys(obj).length === 0);\nexport const isSlimReduxStore = obj => (obj.slimReduxOptions);\n\n/*\n  Validates a subscription string\n*/\n\nexport const isSubscriptionStrValid = (str, state) => {\n  const subStringParts = str.split('.');\n  var statePointer = state;\n\n  // Check whether or not first part is \"store\"\n  if(subStringParts[0] !== 'state')\n    return false;\n\n  for(var i=1; i < subStringParts.length; i++){\n    const nextPart = subStringParts[i];\n\n    if(!(statePointer.hasOwnProperty(nextPart)))\n      return false;\n\n    statePointer = statePointer[nextPart];\n  }\n\n  return true;\n}","export const SUBSCRIPTION           = 'SUBSCRIPTION';\nexport const CALCULATION            = 'CALCULATION';\nexport const CHANGE_TRIGGER         = 'CHANGE_TRIGGER';\nexport const ASYNC_CHANGE_TRIGGER   = 'ASYNC_CHANGE_TRIGGER';\nexport const SLIM_REDUX_COMP_NOTICE = `Remember: For slim-redux-react you need to use the provided API functions to create subscriptions, calculations, and (async) change triggers. They re-use the slim-redux API, so it's possible to re-use slim-redux code. To find out more on how to achieve that, please visit: https://github.com/aGuyNamedJonas/slim-redux-react/blob/0.2-release/README.md#reusing-slim-redux-code-in-slim-redux-react`;","import React from 'react';\nimport { error as _err, isObject, getType } from './util';\nimport { SUBSCRIPTION, CALCULATION, CHANGE_TRIGGER, ASYNC_CHANGE_TRIGGER } from './constants'; \n\nexport function connect(component, stuff){\n    const WrappedComponent = component,\n          displayName      = component.displayName || component.name || 'SlimReduxReact',\n          error            = msg => _err(`<${displayName}/>`, msg);\n\n    class SlimReduxConnector extends React.Component {\n        constructor(props, context){\n            super(props);\n\n            // Check for store instance\n            if(!context.store)\n                error(`No store found in context. Did you forget to wrap your code in the <Provider> component?`);\n\n            const store = context.store;\n\n            // Setup initial state\n            const initialState = {};\n\n            // Setup empty change trigger object\n            this.wrappedChangeTriggers = {};\n\n            // Make sure the stuff object is an object\n            if(!isObject(stuff))\n                error(`\"stuff\" (second parameter) is expected to be of type \"object\", got ${getType(stuff)} instead: \\n ${JSON.stringify(stuff, null, 2)}`);\n            \n            // Go through the stuff object\n            Object.keys(stuff).map(key => {\n                // Make sure that the API functions have been used!\n                if(!stuff[key].type || !(stuff[key].type === SUBSCRIPTION || stuff[key].type === CALCULATION || stuff[key].type === CHANGE_TRIGGER || stuff[key].type === ASYNC_CHANGE_TRIGGER))\n                    error(`No \"type\" field found in stuff-object element \"${key}\". Make sure to use the slim-redux-react API functions to create subscriptions, calculations, and (async) change triggers! \\n ${JSON.stringify(stuff, null, 2)}`);\n\n                // Setup subscription / calculation\n                if(stuff[key].type === SUBSCRIPTION || stuff[key].type === CALCULATION) {\n                    const stateKey = key;\n\n                    // Create a closure so that the stateKey is still available after this setup code has executed\n                    (function(){\n                        // Hook it up to the state\n                        const getInitialValue = stuff[key].creatorFunction(value => {\n                            console.log(`*** Changecallback for ${stateKey}, new value: ${value}`);\n                            this.setState({ [stateKey]: value });\n                        }, store);\n\n                        // Get initial state\n                        initialState[key] = getInitialValue();\n                    }).apply(this, [])\n                }\n\n                // Setup change trigger / async change trigger\n                if(stuff[key].type === CHANGE_TRIGGER || stuff[key].type === ASYNC_CHANGE_TRIGGER) {\n                    const ctKey   = key,\n                          ctStore = store,\n                          ct      = stuff[ctKey].creatorFunction();\n\n                    this.wrappedChangeTriggers[key] = (function(){\n                        // We only pass down the parameters to the change trigger if the change trigger accepts any\n                        if(ct.length === 1)\n                            return function(...params) { \n                                ct(ctStore) \n                            };\n                        else\n                            return function(...params) {\n                                ct(...params, ctStore) \n                            };\n                    })()\n                }\n            });\n\n            // Set initial state\n            this.state = initialState;\n\n\n\n\n\n            // // Go through subscriptions and calculations and set them up to feed into the state\n            // Object.keys(subsAndCalcs).map(key => {\n            //     const stateKey = key;\n\n            //     // Create a closure so that the stateKey is still available after this setup code has executed\n            //     (function(){\n            //         // Hook it up to the state\n            //         const getInitialValue = subsAndCalcs[key](value => {\n            //             this.setState({...this.state, [stateKey]: value});\n            //         }, store);\n\n            //         // Get initial state\n            //         initialState[key] = getInitialValue();\n            //     })()\n            // });\n\n            // this.wrappedChangeTriggers = {};\n\n            // // Go through change triggers and wrap them to use the current store instance\n            // Object.keys(changeTriggers).map(key => {\n            //     wrappedChangeTriggers[key] = function(...params){\n            //         // Creating a new closure to preserve the store instance\n            //         const ct = changeTriggers[key];\n\n            //         // We only pass down the parameters to the change trigger if the change trigger accepts any\n            //         if(ct.length === 1)\n            //             ct(store);\n            //         else\n            //             ct(...params, store);\n            //         }\n            // });\n        }\n\n        componentDidMount() {}\n\n        render() {\n            return <WrappedComponent {...this.props} {...this.initialState} {...this.wrappedChangeTriggers} {...this.state}/>\n        }\n    }\n\n    SlimReduxConnector.displayName = `SlimReduxConnector${displayName}`;\n\n    SlimReduxConnector.contextTypes = {\n        store: React.PropTypes.object\n    }\n\n    return SlimReduxConnector;\n}","import { SUBSCRIPTION } from './constants';\nimport { subscription as slimReduxSubscription } from 'slim-redux';\n\nexport function subscription(subscription) {\n    const createSubscription = (changeCallback, storeArg) => slimReduxSubscription(subscription, changeCallback, storeArg);\n    return {\n        type            : SUBSCRIPTION,\n        creatorFunction : createSubscription, \n    };\n}","import { CALCULATION } from './constants';\nimport { calculation as slimReduxCalculation } from 'slim-redux';\n\nexport function calculation(subscriptions, calcFunction) {\n    const createCalculation = (changeCallback, storeArg) => slimReduxCalculation(subscriptions, calcFunction, changeCallback, storeArg);\n    return {\n        type            : CALCULATION,\n        creatorFunction : createCalculation, \n    };\n}","import { CHANGE_TRIGGER } from './constants';\nimport { changeTrigger as slimReduxChangeTrigger } from 'slim-redux';\n\nexport function changeTrigger(actionType, reducer, focusSubString) {\n    const createChangeTrigger = () => slimReduxChangeTrigger(actionType, reducer, focusSubString);\n    return {\n        type            : CHANGE_TRIGGER,\n        creatorFunction : createChangeTrigger, \n    };\n}","import { error as _err, getType, isFunction, isSet, isObject } from './util';\nimport { ASYNC_CHANGE_TRIGGER, CHANGE_TRIGGER, SLIM_REDUX_COMP_NOTICE } from './constants';\nimport { asyncChangeTrigger as slimReduxAsyncChangeTrigger } from 'slim-redux';\n\nconst error = msg => _err(`slim-redux-react asyncChangeTrigger()`, msg);\n\nexport function asyncChangeTrigger(changeTriggers, triggerFunction) {\n    // Parameter validation\n    if(!isSet(changeTriggers))\n        error(`\"changeTrigger\" (first argument) cannot be null or undefined: \\n ${JSON.stringify(arguments, null, 2)}`);    \n\n    if(!isObject(changeTriggers))\n        error(`\"changeTriggers\" (first argument) needs to be an object, got ${getType(changeTriggers)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n    if(!isSet(triggerFunction))\n        error(`\"triggerFunction\" (second argument) cannot be null or undefined: \\n ${JSON.stringify(arguments, null, 2)}`);\n    \n    if(!isFunction(triggerFunction))\n        error(`\"triggerFunction\" (second argument) needs to be a function, got ${getType(triggerFunction)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n    // Unpack change triggers (to get to the change triggers slim-redux can use)\n    const changeTriggersInitialized = {};\n\n    Object.keys(changeTriggers).map(key => {\n        if(changeTriggers[key].type === CHANGE_TRIGGER)\n            changeTriggersInitialized[key] = changeTriggers[key].creatorFunction();\n        else\n            error(`Issue with changeTriggers[${key}]: Does not seem to be a changeTrigger created with the slim-redux-react API. ${SLIM_REDUX_COMP_NOTICE} \\n ${JSON.stringify(arguments, null, 2)}`);\n    });\n\n    console.log('Initialized change triggers in asyncChangeTrigger (slim-redux-react):');\n    console.dir(changeTriggersInitialized);\n\n    const createAsyncChangeTrigger = () => slimReduxAsyncChangeTrigger(changeTriggersInitialized, triggerFunction);\n    return {\n        type            : ASYNC_CHANGE_TRIGGER,\n        creatorFunction : createAsyncChangeTrigger, \n    };\n}"],"names":["error","location","msg","Error","getType","whatever","constructor","isObject","obj","Object","isFunction","func","isSet","smthg","undefined","SUBSCRIPTION","CALCULATION","CHANGE_TRIGGER","ASYNC_CHANGE_TRIGGER","SLIM_REDUX_COMP_NOTICE","connect","component","stuff","WrappedComponent","displayName","name","_err","SlimReduxConnector","props","context","store","initialState","wrappedChangeTriggers","map","key","type","stateKey","getInitialValue","creatorFunction","log","value","setState","apply","ctKey","ctStore","ct","length","params","state","React","Component","contextTypes","PropTypes","object","subscription","createSubscription","changeCallback","storeArg","slimReduxSubscription","calculation","subscriptions","calcFunction","createCalculation","slimReduxCalculation","changeTrigger","actionType","reducer","focusSubString","createChangeTrigger","slimReduxChangeTrigger","asyncChangeTrigger","changeTriggers","triggerFunction","arguments","changeTriggersInitialized","dir","createAsyncChangeTrigger","slimReduxAsyncChangeTrigger"],"mappings":";;;;;;;;;;;;;;;;;AAAO,IAAMA,QAAQ,SAARA,KAAQ,CAACC,QAAD,EAAWC,GAAX,EAAmB;QAChC,IAAIC,KAAJ,mBAA0BF,QAA1B,UAAuCC,GAAvC,CAAN;CADK;;;;;;AAQP,AAAO,IAAME,UAAU,SAAVA,OAAU;SAAaC,QAAD,CAAWC,WAAvB;CAAhB;AACP,AAAO,IAAMC,WAAW,SAAXA,QAAW;SAAQC,GAAD,CAAMF,WAAN,KAAsBG,MAA7B;CAAjB;AACP,AAAO;AACP,AAAO;AACP,AAAO,IAAMC,aAAa,SAAbA,UAAa;SAAQ,OAAOC,IAAP,IAAgB,UAAxB;CAAnB;AACP,AAAO;AACP,AAAO,IAAMC,QAAQ,SAARA,KAAQ;SAAUC,UAAUC,SAAV,IAAuBD,UAAU,IAA3C;CAAd;AACP,AAAO;AACP,AAAO;AACP,AAAO;;;;EAMP,AAAO,AACL,AACA,AAOE;;AChCG,IAAME,eAAyB,cAA/B;AACP,AAAO,IAAMC,cAAyB,aAA/B;AACP,AAAO,IAAMC,iBAAyB,gBAA/B;AACP,AAAO,IAAMC,uBAAyB,sBAA/B;AACP,AAAO,IAAMC,saAAN;;ACAA,SAASC,OAAT,CAAiBC,SAAjB,EAA4BC,KAA5B,EAAkC;QAC/BC,mBAAmBF,SAAzB;QACMG,cAAmBH,UAAUG,WAAV,IAAyBH,UAAUI,IAAnC,IAA2C,gBADpE;QAEMzB,WAAmB,SAAnBA,QAAmB;eAAO0B,YAASF,WAAT,SAA0BtB,GAA1B,CAAP;KAFzB;;QAIMyB,kBAL+B;;;oCAMrBC,KAAZ,EAAmBC,OAAnB,EAA2B;;;;iJACjBD,KADiB;;gBAIpB,CAACC,QAAQC,KAAZ,EACI9B;;gBAEE8B,QAAQD,QAAQC,KAAtB;;;gBAGMC,eAAe,EAArB;;;kBAGKC,qBAAL,GAA6B,EAA7B;;;gBAGG,CAACzB,SAASe,KAAT,CAAJ,EACItB,iFAA4EI,QAAQkB,KAAR,CAA5E,qBAA0G,gBAAeA,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA1G;;;yBAGQA,KAAZ,EAAmBW,GAAnB,CAAuB,eAAO;;oBAEvB,CAACX,MAAMY,GAAN,EAAWC,IAAZ,IAAoB,EAAEb,MAAMY,GAAN,EAAWC,IAAX,KAAoBpB,YAApB,IAAoCO,MAAMY,GAAN,EAAWC,IAAX,KAAoBnB,WAAxD,IAAuEM,MAAMY,GAAN,EAAWC,IAAX,KAAoBlB,cAA3F,IAA6GK,MAAMY,GAAN,EAAWC,IAAX,KAAoBjB,oBAAnI,CAAvB,EACIlB,6DAAwDkC,GAAxD,sIAA4L,gBAAeZ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA5L;;;oBAGDA,MAAMY,GAAN,EAAWC,IAAX,KAAoBpB,YAApB,IAAoCO,MAAMY,GAAN,EAAWC,IAAX,KAAoBnB,WAA3D,EAAwE;wBAC9DoB,WAAWF,GAAjB;;;qBAGC,YAAU;;;;4BAEDG,kBAAkBf,MAAMY,GAAN,EAAWI,eAAX,CAA2B,iBAAS;oCAChDC,GAAR,6BAAsCH,QAAtC,qBAA8DI,KAA9D;mCACKC,QAAL,qBAAiBL,QAAjB,EAA4BI,KAA5B;yBAFoB,EAGrBV,KAHqB,CAAxB;;;qCAMaI,GAAb,IAAoBG,iBAApB;qBARJ,EASGK,KATH,QASe,EATf;;;;oBAaDpB,MAAMY,GAAN,EAAWC,IAAX,KAAoBlB,cAApB,IAAsCK,MAAMY,GAAN,EAAWC,IAAX,KAAoBjB,oBAA7D,EAAmF;wBACzEyB,QAAUT,GAAhB;wBACMU,UAAUd,KADhB;wBAEMe,KAAUvB,MAAMqB,KAAN,EAAaL,eAAb,EAFhB;;0BAIKN,qBAAL,CAA2BE,GAA3B,IAAmC,YAAU;;4BAEtCW,GAAGC,MAAH,KAAc,CAAjB,EACI,OAAO,YAAoB;+BACpBF,OAAH;yBADJ,CADJ,KAKI,OAAO,YAAoB;8DAARG,MAAQ;sCAAA;;;gDACjBA,MAAN,SAAcH,OAAd;yBADJ;qBAP0B,EAAlC;;aA5BR;;;kBA2CKI,KAAL,GAAajB,YAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAuCgB;;;qCAEX;uBACE,oBAAC,gBAAD,eAAsB,KAAKH,KAA3B,EAAsC,KAAKG,YAA3C,EAA6D,KAAKC,qBAAlE,EAA6F,KAAKgB,KAAlG,EAAP;;;;;MA1GyBC,MAAMC,SALF;;uBAmHlB1B,WAAnB,0BAAsDA,WAAtD;;uBAEmB2B,YAAnB,GAAkC;eACvBF,MAAMG,SAAN,CAAgBC;KAD3B;;WAIO1B,kBAAP;;;AC1HG,SAAS2B,cAAT,CAAsBA,eAAtB,EAAoC;QACjCC,qBAAqB,SAArBA,kBAAqB,CAACC,cAAD,EAAiBC,QAAjB;eAA8BC,uBAAsBJ,eAAtB,EAAoCE,cAApC,EAAoDC,QAApD,CAA9B;KAA3B;WACO;cACe1C,YADf;yBAEewC;KAFtB;;;ACFG,SAASI,aAAT,CAAqBC,aAArB,EAAoCC,YAApC,EAAkD;QAC/CC,oBAAoB,SAApBA,iBAAoB,CAACN,cAAD,EAAiBC,QAAjB;eAA8BM,sBAAqBH,aAArB,EAAoCC,YAApC,EAAkDL,cAAlD,EAAkEC,QAAlE,CAA9B;KAA1B;WACO;cACezC,WADf;yBAEe8C;KAFtB;;;ACFG,SAASE,eAAT,CAAuBC,UAAvB,EAAmCC,OAAnC,EAA4CC,cAA5C,EAA4D;QACzDC,sBAAsB,SAAtBA,mBAAsB;eAAMC,wBAAuBJ,UAAvB,EAAmCC,OAAnC,EAA4CC,cAA5C,CAAN;KAA5B;WACO;cACelD,cADf;yBAEemD;KAFtB;;;ACDJ,IAAMpE,UAAQ,SAARA,OAAQ;WAAO0B,+CAA8CxB,GAA9C,CAAP;CAAd;;AAEA,AAAO,SAASoE,oBAAT,CAA4BC,cAA5B,EAA4CC,eAA5C,EAA6D;;;;QAE7D,CAAC5D,MAAM2D,cAAN,CAAJ,EACIvE,8EAA0E,gBAAeyE,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAA1E;;QAED,CAAClE,SAASgE,cAAT,CAAJ,EACIvE,0EAAsEI,QAAQmE,cAAR,CAAtE,qBAA6G,gBAAeE,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAA7G;;QAED,CAAC7D,MAAM4D,eAAN,CAAJ,EACIxE,iFAA6E,gBAAeyE,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAA7E;;QAED,CAAC/D,WAAW8D,eAAX,CAAJ,EACIxE,6EAAyEI,QAAQoE,eAAR,CAAzE,qBAAiH,gBAAeC,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAjH;;;QAGEC,4BAA4B,EAAlC;;iBAEYH,cAAZ,EAA4BtC,GAA5B,CAAgC,eAAO;YAChCsC,eAAerC,GAAf,EAAoBC,IAApB,KAA6BlB,cAAhC,EACIyD,0BAA0BxC,GAA1B,IAAiCqC,eAAerC,GAAf,EAAoBI,eAApB,EAAjC,CADJ,KAGItC,uCAAmCkC,GAAnC,sFAAuHf,sBAAvH,YAAoJ,4BAA0B,IAA1B,EAAgC,CAAhC,CAApJ;KAJR;;YAOQoB,GAAR,CAAY,uEAAZ;YACQoC,GAAR,CAAYD,yBAAZ;;QAEME,2BAA2B,SAA3BA,wBAA2B;eAAMC,6BAA4BH,yBAA5B,EAAuDF,eAAvD,CAAN;KAAjC;WACO;cACetD,oBADf;yBAEe0D;KAFtB;;;;;;;;;;;;"}