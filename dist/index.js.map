{"version":3,"file":null,"sources":["../src/selector.js","../src/slimReduxReact.js"],"sourcesContent":["import { createSelectorCreator } from 'reselect'\n\n/*\n  Prototyping the custom selector to notify us about updates\n*/\n\nfunction defaultEqualityCheck(a, b) {\n  return a === b\n}\n\nexport function areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction defaultMemoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null\n  let lastResult = null\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    let changed = false\n\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments)\n      changed = true\n    }\n\n    lastArgs = arguments\n\n    return {\n      hasChanged: changed,\n      data: lastResult,\n    }\n  }\n}\n\nexport const getNotifyingSelectorCreator = () => createSelectorCreator(\n  defaultMemoize,\n)\n","import React from 'react';\nimport { getNotifyingSelectorCreator, areArgumentsShallowlyEqual } from './selector';\n\nfunction slimReduxReact(params) {\n  const WrappedComponent = params.component;\n  const changeTriggers   = params.changeTriggers || {};\n  const subscriptions    = params.subscriptions || {};\n\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || '';\n\n  // Returns the appropriate part of the state for a string like \"state.todo.active\"\n  const _getStateFromSubscriptionString = (subscriptionString, state) => {\n    const subStringParts = subscriptionString.split('.');\n    var currentPath = 'state';\n    var stateFromString = state;\n\n    for(var i=1; i < subStringParts.length; i++){\n      const nextPath = subStringParts[i];\n      currentPath += `.${nextPath}`;\n\n      if(!(nextPath in stateFromString))\n        console.error(`*** Error in slimReduxReact container ${displayName}:\\nCannot find path \"${currentPath} in state.\\nState: ${JSON.stringify(state, null, 2)}\"`);\n\n      stateFromString = stateFromString[nextPath];\n    }\n\n    return stateFromString;\n  }\n\n  // Retrieves the data for the subscriptions, first part of the subscription selector\n  const getSubscriptions = (state) => {\n    var storeSubscriptions = {};\n    Object.keys(subscriptions).map(subscription => storeSubscriptions[subscription] = _getStateFromSubscriptionString(subscriptions[subscription], state))\n    return storeSubscriptions;\n  }\n\n  // Create subscrption selector\n  const createNotifyingSelector = getNotifyingSelectorCreator();\n  const checkSubscriptionSelector = createNotifyingSelector(\n    getSubscriptions,\n    subscriptionData => subscriptionData,\n  );\n\n  // Create change creators    TODO: change creators could also be functions to mock stuff!!\n\n\n  class SlimReduxConnector extends React.Component {\n    constructor(props, context){\n      super(props);\n\n      if(!context.store)\n        console.error(`*** Error in SlimReduxConnector component: No store found in context. Did you forget to wrap your code in the <Provider> component?`);\n\n      const initialSubscriptionState = checkSubscriptionSelector(context.store.getState())\n      this.state = { ...initialSubscriptionState.data }\n\n      this.registeredChangeTriggers = {}\n      Object.keys(changeTriggers).map(changeTrigger => this.registeredChangeTriggers[changeTrigger] = context.store.createChangeTrigger(changeTriggers[changeTrigger]))\n    }\n\n    componentDidMount() {\n      // SUBSCRIBE THIS MOTHERFUCKER TO SUBSCRIPTION CHANGES!\n      this.context.store.subscribe(() => {\n        const subscriptionState = checkSubscriptionSelector(this.context.store.getState())\n\n        if(subscriptionState.hasChanged)\n          this.setState({\n            ...this.state,\n            ...subscriptionState.data,\n        })\n      })\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.registeredChangeTriggers} {...this.state}/>\n    }\n  }\n\n  SlimReduxConnector.displayName = `SlimReduxConnector${displayName}`;\n\n  SlimReduxConnector.contextTypes = {\n    store: React.PropTypes.object\n  }\n\n  return SlimReduxConnector;\n}\n\nexport default slimReduxReact;\n"],"names":["defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","length","i","defaultMemoize","func","lastArgs","lastResult","changed","arguments","apply","getNotifyingSelectorCreator","createSelectorCreator","slimReduxReact","params","WrappedComponent","component","changeTriggers","subscriptions","displayName","name","_getStateFromSubscriptionString","subscriptionString","state","subStringParts","split","currentPath","stateFromString","nextPath","console","error","getSubscriptions","storeSubscriptions","map","subscription","createNotifyingSelector","checkSubscriptionSelector","subscriptionData","SlimReduxConnector","props","context","store","initialSubscriptionState","getState","data","registeredChangeTriggers","changeTrigger","createChangeTrigger","subscribe","subscriptionState","hasChanged","setState","React","Component","contextTypes","PropTypes","object"],"mappings":";;;;;;;;;;;;;;;;;;AAEA;;;;AAIA,SAASA,oBAAT,CAA8BC,CAA9B,EAAiCC,CAAjC,EAAoC;SAC3BD,MAAMC,CAAb;;;AAGF,AAAO,SAASC,0BAAT,CAAoCC,aAApC,EAAmDC,IAAnD,EAAyDC,IAAzD,EAA+D;MAChED,SAAS,IAAT,IAAiBC,SAAS,IAA1B,IAAkCD,KAAKE,MAAL,KAAgBD,KAAKC,MAA3D,EAAmE;WAC1D,KAAP;;;;MAIIA,SAASF,KAAKE,MAApB;OACK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;QAC3B,CAACJ,cAAcC,KAAKG,CAAL,CAAd,EAAuBF,KAAKE,CAAL,CAAvB,CAAL,EAAsC;aAC7B,KAAP;;;;SAIG,IAAP;;;AAGF,SAASC,cAAT,CAAwBC,IAAxB,EAAoE;MAAtCN,aAAsC,uEAAtBJ,oBAAsB;;MAC9DW,WAAW,IAAf;MACIC,aAAa,IAAjB;;SAEO,YAAY;QACbC,UAAU,KAAd;;QAEI,CAACV,2BAA2BC,aAA3B,EAA0CO,QAA1C,EAAoDG,SAApD,CAAL,EAAqE;;mBAEtDJ,KAAKK,KAAL,CAAW,IAAX,EAAiBD,SAAjB,CAAb;gBACU,IAAV;;;eAGSA,SAAX;;WAEO;kBACOD,OADP;YAECD;KAFR;GAXF;;;AAkBF,AAAO,IAAMI,8BAA8B,SAA9BA,2BAA8B;SAAMC,+BAC/CR,cAD+C,CAAN;CAApC;;AC7CP,SAASS,cAAT,CAAwBC,MAAxB,EAAgC;MACxBC,mBAAmBD,OAAOE,SAAhC;MACMC,iBAAmBH,OAAOG,cAAP,IAAyB,EAAlD;MACMC,gBAAmBJ,OAAOI,aAAP,IAAwB,EAAjD;;MAEMC,cAAcJ,iBAAiBI,WAAjB,IAAgCJ,iBAAiBK,IAAjD,IAAyD,EAA7E;;;MAGMC,kCAAkC,SAAlCA,+BAAkC,CAACC,kBAAD,EAAqBC,KAArB,EAA+B;QAC/DC,iBAAiBF,mBAAmBG,KAAnB,CAAyB,GAAzB,CAAvB;QACIC,cAAc,OAAlB;QACIC,kBAAkBJ,KAAtB;;SAEI,IAAIpB,IAAE,CAAV,EAAaA,IAAIqB,eAAetB,MAAhC,EAAwCC,GAAxC,EAA4C;UACpCyB,WAAWJ,eAAerB,CAAf,CAAjB;2BACmByB,QAAnB;;UAEG,EAAEA,YAAYD,eAAd,CAAH,EACEE,QAAQC,KAAR,4CAAuDX,WAAvD,6BAA0FO,WAA1F,2BAA2H,gBAAeH,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA3H;;wBAEgBI,gBAAgBC,QAAhB,CAAlB;;;WAGKD,eAAP;GAfF;;;MAmBMI,mBAAmB,SAAnBA,gBAAmB,CAACR,KAAD,EAAW;QAC9BS,qBAAqB,EAAzB;iBACYd,aAAZ,EAA2Be,GAA3B,CAA+B;aAAgBD,mBAAmBE,YAAnB,IAAmCb,gCAAgCH,cAAcgB,YAAd,CAAhC,EAA6DX,KAA7D,CAAnD;KAA/B;WACOS,kBAAP;GAHF;;;MAOMG,0BAA0BxB,6BAAhC;MACMyB,4BAA4BD,wBAChCJ,gBADgC,EAEhC;WAAoBM,gBAApB;GAFgC,CAAlC;;;;;MAQMC,kBA3CwB;;;gCA4ChBC,KAAZ,EAAmBC,OAAnB,EAA2B;;;2IACnBD,KADmB;;UAGtB,CAACC,QAAQC,KAAZ,EACEZ,QAAQC,KAAR;;UAEIY,2BAA2BN,0BAA0BI,QAAQC,KAAR,CAAcE,QAAd,EAA1B,CAAjC;YACKpB,KAAL,gBAAkBmB,yBAAyBE,IAA3C;;YAEKC,wBAAL,GAAgC,EAAhC;mBACY5B,cAAZ,EAA4BgB,GAA5B,CAAgC;eAAiB,MAAKY,wBAAL,CAA8BC,aAA9B,IAA+CN,QAAQC,KAAR,CAAcM,mBAAd,CAAkC9B,eAAe6B,aAAf,CAAlC,CAAhE;OAAhC;;;;;;0CAGkB;;;;aAEbN,OAAL,CAAaC,KAAb,CAAmBO,SAAnB,CAA6B,YAAM;cAC3BC,oBAAoBb,0BAA0B,OAAKI,OAAL,CAAaC,KAAb,CAAmBE,QAAnB,EAA1B,CAA1B;;cAEGM,kBAAkBC,UAArB,EACE,OAAKC,QAAL,cACK,OAAK5B,KADV,EAEK0B,kBAAkBL,IAFvB;SAJJ;;;;+BAWO;eACA,oBAAC,gBAAD,eAAsB,KAAKL,KAA3B,EAAsC,KAAKM,wBAA3C,EAAyE,KAAKtB,KAA9E,EAAP;;;;;IA5B6B6B,MAAMC,SA3CT;;qBA2EXlC,WAAnB,0BAAsDA,WAAtD;;qBAEmBmC,YAAnB,GAAkC;WACzBF,MAAMG,SAAN,CAAgBC;GADzB;;SAIOlB,kBAAP;CAGF;;;"}